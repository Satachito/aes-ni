#include	"aes.h"
typedef	unsigned char	UI1;

//	test vectors were taken from http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf

ALIGN16 UI1
AES128_TEST_KEY[] = {
	0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,
	0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c
};
ALIGN16 UI1
AES192_TEST_KEY[] = {
	0x8e,0x73,0xb0,0xf7,0xda,0x0e,0x64,0x52,
	0xc8,0x10,0xf3,0x2b,0x80,0x90,0x79,0xe5,
	0x62,0xf8,0xea,0xd2,0x52,0x2c,0x6b,0x7b
};
ALIGN16 UI1
AES256_TEST_KEY[] = {
	0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,
	0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,
	0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,
	0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4
};
ALIGN16 UI1
AES_TEST_VECTOR[] = {
	0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,
	0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,
	0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,
	0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,
	0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,
	0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef,
	0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,
	0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10
};
ALIGN16 UI1
CBC_IV[] = {
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
	0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
};
ALIGN16 UI1
CBC128_EXPECTED[] = {
	0x76,0x49,0xab,0xac,0x81,0x19,0xb2,0x46,
	0xce,0xe9,0x8e,0x9b,0x12,0xe9,0x19,0x7d,
	0x50,0x86,0xcb,0x9b,0x50,0x72,0x19,0xee,
	0x95,0xdb,0x11,0x3a,0x91,0x76,0x78,0xb2,
	0x73,0xbe,0xd6,0xb8,0xe3,0xc1,0x74,0x3b,
	0x71,0x16,0xe6,0x9e,0x22,0x22,0x95,0x16,
	0x3f,0xf1,0xca,0xa1,0x68,0x1f,0xac,0x09,
	0x12,0x0e,0xca,0x30,0x75,0x86,0xe1,0xa7
};
ALIGN16 UI1
CBC192_EXPECTED[] = {
	0x4f,0x02,0x1d,0xb2,0x43,0xbc,0x63,0x3d,
	0x71,0x78,0x18,0x3a,0x9f,0xa0,0x71,0xe8,
	0xb4,0xd9,0xad,0xa9,0xad,0x7d,0xed,0xf4,
	0xe5,0xe7,0x38,0x76,0x3f,0x69,0x14,0x5a,
	0x57,0x1b,0x24,0x20,0x12,0xfb,0x7a,0xe0,
	0x7f,0xa9,0xba,0xac,0x3d,0xf1,0x02,0xe0,
	0x08,0xb0,0xe2,0x79,0x88,0x59,0x88,0x81,
	0xd9,0x20,0xa9,0xe6,0x4f,0x56,0x15,0xcd
};
ALIGN16 UI1
CBC256_EXPECTED[] = {
	0xf5,0x8c,0x4c,0x04,0xd6,0xe5,0xf1,0xba,
	0x77,0x9e,0xab,0xfb,0x5f,0x7b,0xfb,0xd6,
	0x9c,0xfc,0x4e,0x96,0x7e,0xdb,0x80,0x8d,
	0x67,0x9f,0x77,0x7b,0xc6,0x70,0x2c,0x7d,
	0x39,0xf2,0x33,0x69,0xa9,0xd9,0xba,0xcf,
	0xa5,0x30,0xe2,0x63,0x04,0x23,0x14,0x61,
	0xb2,0xeb,0x05,0xe2,0xc3,0x9b,0xe9,0xfc,
	0xda,0x6c,0x19,0x07,0x8c,0x6a,0x9d,0x1b
};

/*****************************************************************************/
typedef	unsigned char	UI1;
#define	LENGTH	64
#include	<iostream>
#include	<string>
#include	<vector>
using namespace std;
#include	"Hex.h"

void
Test(
	UI1*	PLAINTEXT
,	UI1*	CIPHER_KEY
,	int		key_length
,	UI1*	EXPECTED_CIPHERTEXT
) {
	UI1		CIPHERTEXT[ LENGTH ];
	AES_KEY	key;
	AES_set_encrypt_key( CIPHER_KEY, key_length, &key );
	AES_CBC_encrypt(
		PLAINTEXT
	,	CIPHERTEXT
	,	CBC_IV
	,	LENGTH
	,	key.KEY
	,	key.nr
	);

	UI1		DECRYPTEDTEXT[ LENGTH ];
	AES_KEY	decrypt_key;
	AES_set_decrypt_key( CIPHER_KEY, key_length, &decrypt_key );
	AES_CBC_decrypt(
		CIPHERTEXT
	,	DECRYPTEDTEXT
	,	CBC_IV
	,	LENGTH
	,	decrypt_key.KEY
	,	decrypt_key.nr
	);
	cout << "The Cipher Key:\n";
	cout << '\t' << EncodeHex( CIPHER_KEY, key_length / 8 ) << endl;
	cout << "The Key Schedule:\n";
	for ( auto i = 0; i < key.nr; i++ ) cout << '\t' << EncodeHex( &key.KEY[ i * 16 ], 16 ) << endl;
	cout << "The CIPHERTEXT:\n";
	for ( auto i = 0; i < LENGTH / 16; i++ ) cout << '\t' << EncodeHex( &CIPHERTEXT[ i * 16 ], 16 ) << endl;
	if ( LENGTH%16 ) cout << '\t' << EncodeHex( &CIPHERTEXT[ LENGTH / 16 * 16 ], LENGTH % 16 ) << endl;

	for( auto i=0; i<LENGTH; i++) if ( CIPHERTEXT[i] != EXPECTED_CIPHERTEXT[i%(16*4)]) throw "The CIPHERTEXT is not equal to the EXPECTED CIHERTEXT.\n\n";
	for( auto i=0; i<LENGTH; i++) if ( DECRYPTEDTEXT[i] != PLAINTEXT[i%(16*4)]) throw "The DECRYPTED TEXT isn't equal to the original PLAINTEXT!";
}

int
main() {

	if ( !Check_CPU_support_AES() ) throw "Cpu does not support AES instruction set. Bailing out.";

	UI1		PLAINTEXT[ LENGTH ];

	auto i = 0;
	for ( ; i < LENGTH / 16 / 4; i++ ) {
		for ( auto j = 0; j < 4; j++ ) {
			_mm_storeu_si128(
				&((__m128i*)PLAINTEXT)[ i * 4 + j ]
			,	((__m128i*)AES_TEST_VECTOR)[ j ]
			);
		}
	}
	auto j = i * 4;
	for ( ; j < LENGTH / 16; j++ ) {
		_mm_storeu_si128(
			&((__m128i*)PLAINTEXT)[ j ]
		,	((__m128i*)AES_TEST_VECTOR)[ j % 4 ]
		);
	}
	if ( LENGTH % 16 ) {
		_mm_storeu_si128(
			&((__m128i*)PLAINTEXT)[ j ]
		,	((__m128i*)AES_TEST_VECTOR)[ j % 4 ]
		);
	}

	cout << "The PLAINTEXT:\n";
	for ( auto i = 0; i< LENGTH / 16; i++ ) cout << '\t' << EncodeHex( &PLAINTEXT[ i * 16 ], 16 ) << endl;
	cout << endl;

	try {
		cerr << "Performing AES128 CBC.\n";
		Test(
			PLAINTEXT
		,	AES128_TEST_KEY
		,	128
		,	CBC128_EXPECTED
		);
		cerr << endl;
		cerr << "Performing AES192 CBC.\n";
		Test(
			PLAINTEXT
		,	AES192_TEST_KEY
		,	192
		,	CBC192_EXPECTED
		);
		cerr << endl;
		cerr << "Performing AES256 CBC.\n";
		Test(
			PLAINTEXT
		,	AES256_TEST_KEY
		,	256
		,	CBC256_EXPECTED
		);
		cerr << endl;
	} catch ( const char* _ ) { cerr << _ << endl; }
}

